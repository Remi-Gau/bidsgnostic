# ---- begin snakebids boilerplate ----------------------------------------------

from pathlib import Path

import snakebids
from snakebids import bids

from rich import print


configfile: workflow.source_path("../config/snakebids.yml")


# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

inputs.wildcards == {
    "events": {"subject": "{subject}", "task": "{task}", "run": "{run}", "extension": "{extension}"},
}


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------

if config["log_level"] == "2":
    print(f"Configuration:\n{config}")

output_dir = Path(config["output_dir"]).joinpath("bidsgnostic")

rule plot_events:
    input:
        events=inputs.path["events"],
    params:
        log_level=config["log_level"],
        include_events=config["include_events"],
        event_column=config["event_column"],
        extension=config["extension"],
    output:
        file=bids(
            root="bidsgnostic", suffix="events.html", **inputs.wildcards["events"]
        ),
    script:
        "scripts/plot_events.py"


rule layout_html:
    input:
        bids_dir=config["bids_dir"],
    params:
        log_level=config["log_level"],
    output:
        datatype_html=output_dir.joinpath("dataset_splitby-datatype_summary.html"),
        task_html=output_dir.joinpath("dataset_splitby-task_summary.html"),
    script:
        "scripts/plot_layout.py"


rule desc:
    input:
        output_dir=config["output_dir"],
    output:
        desc=output_dir.joinpath("dataset_description.json"),
    script:
        "scripts/ds_desc.py"


rule license:
    input:
        output_dir=config["output_dir"],
    output:
        license=output_dir.joinpath("LICENSE"),
    script:
        "scripts/license.py"


rule readme:
    input:
        output_dir=config["output_dir"],
    output:
        readme=output_dir.joinpath("README.md"),
    script:
        "scripts/readme.py"

# not sure why top_files doe snot work
rule top_files:
    input:
        rules.desc.output,
        rules.license.output,
        rules.readme.output,


rule all:
    input:
        rules.top_files.input,
        expand(
            bids(
                root="bidsgnostic", suffix="events.html", **inputs.wildcards["events"]
            ),
            **inputs.entities["events"]
        ),
    default_target: True


rule group:
    input:
        rules.top_files.input,
        rules.layout_html.output,
