#---- begin snakebids boilerplate ----------------------------------------------

from pathlib import Path

import snakebids
from snakebids import bids

configfile: workflow.source_path('../config/snakebids.yml')

# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

inputs.wildcards == {
    "events": {"subject": "{subject}", "task": "{task}", "run": "{run}"}
}

print(f"configuration:\n{config}")



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------


rule plot_events:
    input:
        events=inputs.path["events"],
    params:
        log_level=config["log_level"],
    output:
        file=bids(
            root="bidsgnostic", suffix="events.html", **inputs.wildcards["events"]
        ),
    script:
        "scripts/plot_events.py"

rule top_files:
    input:
        output_dir= config["output_dir"]
    output:
        desc = Path(config["output_dir"]).joinpath("bidsgnostic", "dataset_description.json"),
        readme = Path(config["output_dir"]).joinpath("bidsgnostic", "README.md"),
        license = Path(config["output_dir"]).joinpath("bidsgnostic", "LICENSE"),
    script:
        "scripts/add_top_files.py"


rule all:
    input:
        expand(
            bids(
                root="bidsgnostic", suffix="events.html", **inputs.wildcards["events"]
            ),
            **inputs.entities["events"]
        ),
        rules.top_files.output.desc,
        rules.top_files.output.readme,
        rules.top_files.output.license,
    default_target: True
